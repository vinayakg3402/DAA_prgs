#include<stdio.h>
void kruskal(int cost[5][5],int n)
{
	int par[n];
	int a=0,b=0,u=0,v=0,min,i,j,mincost=0,ne=1;
	for(i=0;i<n;i++)
	     par[i]=-1;
	printf("\n The minimum spanning tree edges are...");
	while(ne<=n-1)
	{
		//find the least cost edge
		    min = 999;
		for(i=0;i<n;i++)
		   for(j=0;j<n;j++)
		     if(cost[i][j]<min)
		     {
		     	min=cost[i][j];
		     	a=u=i;
		     	b=v=j;
				 
				 // chech if edge select cause cyclicity?
				  while(par[u]!=-1)
				  u=par[u];
				  
				while(par[v]!=-1)
				   v=par[v];
				   
				if(u!=v)
				{
					printf("from vertex %d to vertex %d the cost is = %d\n",a,b,min);
					mincost+=min;
					if(par[b]==-1)
					    par[b]=a;
					         else
					              par[a]=b;
					            
					ne++;
				 } 
				 
				 //edge included in MST should not be considered for next iteration 
				     cost[a][b]=cost[b][a]=999;
				     
			 }
			 
			 printf("cost of MST = %d",mincost);
			 
	}
}
	
	int main()
	{
		int n,c[5][5],i,j;
		
		printf("\nEnter the no.of vertices :");
		 scanf("%d",&n);
		 {
		   printf("\nEnter the adjacency matrix :");
		  }
		 for(i=0;i<n;i++)
		 {
		 	for(j=0;i<n;j++)
		 	{
		 		scanf("%d",&c[i][j]);
		 		if(c[i][j]==0)
		 		     c[i][j]=999;
			 }
		 }
		 
		 kruskal(c,5);
		 return 0;
	}
